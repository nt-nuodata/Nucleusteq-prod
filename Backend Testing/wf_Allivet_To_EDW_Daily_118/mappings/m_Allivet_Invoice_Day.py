# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, Shortcut_to_ALLIVET_INVOICE_DAY_0


df_0 = spark.sql("""SELECT
  INVOICE_POSTING_DT AS INVOICE_POSTING_DT,
  INVOICE_CD AS INVOICE_CD,
  TXN_TYPE AS TXN_TYPE,
  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,
  ALLIVET_SKU_NBR AS ALLIVET_SKU_NBR,
  PRODUCT_ID AS PRODUCT_ID,
  PETSMART_ORDER_NBR AS PETSMART_ORDER_NBR,
  PETSMART_SKU_NBR AS PETSMART_SKU_NBR,
  UPC_ID AS UPC_ID,
  SOLD_UNITS_QTY AS SOLD_UNITS_QTY,
  PRODUCT_COST AS PRODUCT_COST,
  RETAIL_PRICE AS RETAIL_PRICE,
  MANUFACTURER AS MANUFACTURER,
  BRAND_NAME AS BRAND_NAME,
  TITLE AS TITLE,
  FREIGHT_FEE_AMT AS FREIGHT_FEE_AMT,
  PACKAGING_FEE_AMT AS PACKAGING_FEE_AMT,
  DISPENSING_FEE_AMT AS DISPENSING_FEE_AMT,
  SHIPPED_DT AS SHIPPED_DT,
  FULFILLMENT_ORIGIN_ZIP_CD AS FULFILLMENT_ORIGIN_ZIP_CD,
  SHIP_CARRIER_NAME AS SHIP_CARRIER_NAME,
  TRACKING_NBR AS TRACKING_NBR,
  ALLIVET_CUSTOMER_NBR AS ALLIVET_CUSTOMER_NBR,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_BIRT_DT AS PET_BIRT_DT,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY_DESC AS PET_ALLERGY_DESC,
  PET_MEDICAL_CONDITION AS PET_MEDICAL_CONDITION,
  PET_PREGNANT_FLAG AS PET_PREGNANT_FLAG,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VET_NAME AS VET_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE_CD AS VET_STATE_CD,
  VET_ZIP_CD AS VET_ZIP_CD,
  VET_PHONE_NBR AS VET_PHONE_NBR,
  DELETE_FLAG AS DELETE_FLAG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  ALLIVET_INVOICE_DAY""")

df_0.createOrReplaceTempView("Shortcut_to_ALLIVET_INVOICE_DAY_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_ALLIVET_INVOICE_DAY_1


df_1 = spark.sql("""SELECT
  INVOICE_POSTING_DT AS INVOICE_POSTING_DT,
  INVOICE_CD AS INVOICE_CD,
  TXN_TYPE AS TXN_TYPE,
  ALLIVET_ORDER_NBR AS ALLIVET_ORDER_NBR,
  ALLIVET_SKU_NBR AS ALLIVET_SKU_NBR,
  PRODUCT_ID AS PRODUCT_ID,
  PETSMART_ORDER_NBR AS PETSMART_ORDER_NBR,
  PETSMART_SKU_NBR AS PETSMART_SKU_NBR,
  UPC_ID AS UPC_ID,
  SOLD_UNITS_QTY AS SOLD_UNITS_QTY,
  PRODUCT_COST AS PRODUCT_COST,
  RETAIL_PRICE AS RETAIL_PRICE,
  MANUFACTURER AS MANUFACTURER,
  BRAND_NAME AS BRAND_NAME,
  TITLE AS TITLE,
  FREIGHT_FEE_AMT AS FREIGHT_FEE_AMT,
  PACKAGING_FEE_AMT AS PACKAGING_FEE_AMT,
  DISPENSING_FEE_AMT AS DISPENSING_FEE_AMT,
  NULL AS SHIPPED_DTE,
  FULFILLMENT_ORIGIN_ZIP_CD AS FULFILLMENT_ORIGIN_ZIP_CD,
  SHIP_CARRIER_NAME AS SHIP_CARRIER_NAME,
  TRACKING_NBR AS TRACKING_NBR,
  ALLIVET_CUSTOMER_NBR AS ALLIVET_CUSTOMER_NBR,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_BIRT_DT AS PET_BIRT_DT,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY_DESC AS PET_ALLERGY_DESC,
  PET_MEDICAL_CONDITION AS PET_MEDICAL_CONDITION,
  PET_PREGNANT_FLAG AS PET_PREGNANT_FLAG,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VET_NAME AS VET_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE_CD AS VET_STATE_CD,
  VET_ZIP_CD AS VET_ZIP_CD,
  VET_PHONE_NBR AS VET_PHONE_NBR,
  DELETE_FLAG AS DELETE_FLAG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_ALLIVET_INVOICE_DAY_0""")

df_1.createOrReplaceTempView("SQ_Shortcut_to_ALLIVET_INVOICE_DAY_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_ALLIVET_DAILY_INVOICE_PRE_2


df_2 = spark.sql("""SELECT
  INVOICE_POSTING_DATE_v2 AS INVOICE_POSTING_DATE_v2,
  INVOICE_CODE AS INVOICE_CODE,
  TRANSACTION_TYPE AS TRANSACTION_TYPE,
  ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  ALLIVET_SKU AS ALLIVET_SKU,
  PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  PETSMART_SKU AS PETSMART_SKU,
  UPC AS UPC,
  UNITS_SOLD AS UNITS_SOLD,
  PRODUCT_COST AS PRODUCT_COST,
  RETAIL_PRICE AS RETAIL_PRICE,
  MANUFACTURER AS MANUFACTURER,
  BRAND AS BRAND,
  TITLE AS TITLE,
  FREIGHT_FEE AS FREIGHT_FEE,
  PACKAGING_FEE AS PACKAGING_FEE,
  DISPENSING_FEE AS DISPENSING_FEE,
  SHIPPED_DATE AS SHIPPED_DATE,
  FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  SHIPPING_CARRIER AS SHIPPING_CARRIER,
  TRACKING_NUMBER AS TRACKING_NUMBER,
  ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_DOB AS PET_DOB,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY AS PET_ALLERGY,
  PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  PET_IS_PREGNANT AS PET_IS_PREGNANT,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VETERINARY_NAME AS VETERINARY_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE AS VET_STATE,
  VET_ZIP AS VET_ZIP,
  VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  ALLIVET_DAILY_INVOICE_PRE""")

df_2.createOrReplaceTempView("Shortcut_to_ALLIVET_DAILY_INVOICE_PRE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_ALLIVET_DAILY_INVOICE_PRE_3


df_3 = spark.sql("""SELECT
  INVOICE_POSTING_DATE_v2 AS INVOICE_POSTING_DATE,
  INVOICE_CODE AS INVOICE_CODE,
  TRANSACTION_TYPE AS TRANSACTION_TYPE,
  ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  ALLIVET_SKU AS ALLIVET_SKU,
  PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  PETSMART_SKU AS PETSMART_SKU,
  UPC AS UPC,
  UNITS_SOLD AS UNITS_SOLD,
  PRODUCT_COST AS PRODUCT_COST,
  MANUFACTURER AS MANUFACTURER,
  BRAND AS BRAND,
  TITLE AS TITLE,
  FREIGHT_FEE AS FREIGHT_FEE,
  PACKAGING_FEE AS PACKAGING_FEE,
  DISPENSING_FEE AS DISPENSING_FEE,
  SHIPPED_DATE AS SHIPPED_DATE,
  FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  SHIPPING_CARRIER AS SHIPPING_CARRIER,
  TRACKING_NUMBER AS TRACKING_NUMBER,
  ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_DOB AS PET_DOB,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY AS PET_ALLERGY,
  PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  PET_IS_PREGNANT AS PET_IS_PREGNANT,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VETERINARY_NAME AS VETERINARY_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE AS VET_STATE,
  VET_ZIP AS VET_ZIP,
  VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  LOAD_TSTMP AS LOAD_TSTMP,
  RETAIL_PRICE AS RETAIL_PRICE,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_ALLIVET_DAILY_INVOICE_PRE_2""")

df_3.createOrReplaceTempView("SQ_Shortcut_to_ALLIVET_DAILY_INVOICE_PRE_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SKU_PROFILE_4


df_4 = spark.sql("""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  SKU_TYPE AS SKU_TYPE,
  PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  STATUS_ID AS STATUS_ID,
  SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
  SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
  SKU_DESC AS SKU_DESC,
  ALT_DESC AS ALT_DESC,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  SAP_CLASS_ID AS SAP_CLASS_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  COUNTRY_CD AS COUNTRY_CD,
  IMPORT_FLAG AS IMPORT_FLAG,
  HTS_CODE_ID AS HTS_CODE_ID,
  CONTENTS AS CONTENTS,
  CONTENTS_UNITS AS CONTENTS_UNITS,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  SIZE_DESC AS SIZE_DESC,
  BUM_QTY AS BUM_QTY,
  UOM_CD AS UOM_CD,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  BUYER_ID AS BUYER_ID,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
  TAX_CLASS_ID AS TAX_CLASS_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  BRAND_CD AS BRAND_CD,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  STATELINE_FLAG AS STATELINE_FLAG,
  SIGN_TYPE_CD AS SIGN_TYPE_CD,
  OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  INIT_MKDN_DT AS INIT_MKDN_DT,
  DISC_START_DT AS DISC_START_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  FIRST_SALE_DT AS FIRST_SALE_DT,
  LAST_SALE_DT AS LAST_SALE_DT,
  FIRST_INV_DT AS FIRST_INV_DT,
  LAST_INV_DT AS LAST_INV_DT,
  LOAD_DT AS LOAD_DT,
  BASE_NBR AS BASE_NBR,
  BP_COLOR_ID AS BP_COLOR_ID,
  BP_SIZE_ID AS BP_SIZE_ID,
  BP_BREED_ID AS BP_BREED_ID,
  BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
  BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
  BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
  CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
  NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
  NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
  RTV_DEPT_CD AS RTV_DEPT_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
  COMPONENT_FLAG AS COMPONENT_FLAG,
  ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
  ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
  ZDISCO_PID_DT AS ZDISCO_PID_DT,
  ZDISCO_START_DT AS ZDISCO_START_DT,
  ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
  ZDISCO_DC_DT AS ZDISCO_DC_DT,
  ZDISCO_STR_DT AS ZDISCO_STR_DT,
  ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
  ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT
FROM
  SKU_PROFILE""")

df_4.createOrReplaceTempView("Shortcut_to_SKU_PROFILE_4")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SKU_PROFILE_5


df_5 = spark.sql("""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  SKU_TYPE AS SKU_TYPE,
  PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  STATUS_ID AS STATUS_ID,
  SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
  SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
  SKU_DESC AS SKU_DESC,
  ALT_DESC AS ALT_DESC,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  SAP_CLASS_ID AS SAP_CLASS_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  COUNTRY_CD AS COUNTRY_CD,
  IMPORT_FLAG AS IMPORT_FLAG,
  HTS_CODE_ID AS HTS_CODE_ID,
  CONTENTS AS CONTENTS,
  CONTENTS_UNITS AS CONTENTS_UNITS,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  SIZE_DESC AS SIZE_DESC,
  BUM_QTY AS BUM_QTY,
  UOM_CD AS UOM_CD,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  BUYER_ID AS BUYER_ID,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
  TAX_CLASS_ID AS TAX_CLASS_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  BRAND_CD AS BRAND_CD,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  STATELINE_FLAG AS STATELINE_FLAG,
  SIGN_TYPE_CD AS SIGN_TYPE_CD,
  OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  INIT_MKDN_DT AS INIT_MKDN_DT,
  DISC_START_DT AS DISC_START_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  FIRST_SALE_DT AS FIRST_SALE_DT,
  LAST_SALE_DT AS LAST_SALE_DT,
  FIRST_INV_DT AS FIRST_INV_DT,
  LAST_INV_DT AS LAST_INV_DT,
  LOAD_DT AS LOAD_DT,
  BASE_NBR AS BASE_NBR,
  BP_COLOR_ID AS BP_COLOR_ID,
  BP_SIZE_ID AS BP_SIZE_ID,
  BP_BREED_ID AS BP_BREED_ID,
  BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
  BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
  BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
  CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
  NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
  NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
  RTV_DEPT_CD AS RTV_DEPT_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
  COMPONENT_FLAG AS COMPONENT_FLAG,
  ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
  ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
  ZDISCO_PID_DT AS ZDISCO_PID_DT,
  ZDISCO_START_DT AS ZDISCO_START_DT,
  ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
  ZDISCO_DC_DT AS ZDISCO_DC_DT,
  ZDISCO_STR_DT AS ZDISCO_STR_DT,
  ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
  ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SKU_PROFILE_4""")

df_5.createOrReplaceTempView("SQ_Shortcut_to_SKU_PROFILE_5")

# COMMAND ----------
# DBTITLE 1, Jnr_SKU_Profile_6


df_6 = spark.sql("""SELECT
  DETAIL.INVOICE_POSTING_DATE AS INVOICE_POSTING_DATE,
  DETAIL.INVOICE_CODE AS INVOICE_CODE,
  DETAIL.TRANSACTION_TYPE AS TRANSACTION_TYPE,
  DETAIL.ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  DETAIL.ALLIVET_SKU AS ALLIVET_SKU,
  DETAIL.PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  DETAIL.PETSMART_SKU AS PETSMART_SKU,
  DETAIL.UPC AS UPC,
  DETAIL.UNITS_SOLD AS UNITS_SOLD,
  DETAIL.PRODUCT_COST AS PRODUCT_COST,
  DETAIL.MANUFACTURER AS MANUFACTURER,
  DETAIL.BRAND AS BRAND,
  DETAIL.TITLE AS TITLE,
  DETAIL.FREIGHT_FEE AS FREIGHT_FEE,
  DETAIL.PACKAGING_FEE AS PACKAGING_FEE,
  DETAIL.DISPENSING_FEE AS DISPENSING_FEE,
  DETAIL.SHIPPED_DATE AS SHIPPED_DATE,
  DETAIL.FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  DETAIL.SHIPPING_CARRIER AS SHIPPING_CARRIER,
  DETAIL.TRACKING_NUMBER AS TRACKING_NUMBER,
  DETAIL.ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  DETAIL.PET_NAME AS PET_NAME,
  DETAIL.PET_TYPE AS PET_TYPE,
  DETAIL.BREED_TYPE AS BREED_TYPE,
  DETAIL.PET_GENDER AS PET_GENDER,
  DETAIL.PET_DOB AS PET_DOB,
  DETAIL.PET_WEIGHT AS PET_WEIGHT,
  DETAIL.PET_ALLERGY AS PET_ALLERGY,
  DETAIL.PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  DETAIL.PET_IS_PREGNANT AS PET_IS_PREGNANT,
  DETAIL.VET_CLINIC_NAME AS VET_CLINIC_NAME,
  DETAIL.VETERINARY_NAME AS VETERINARY_NAME,
  DETAIL.VET_ADDRESS AS VET_ADDRESS,
  DETAIL.VET_CITY AS VET_CITY,
  DETAIL.VET_STATE AS VET_STATE,
  DETAIL.VET_ZIP AS VET_ZIP,
  DETAIL.VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  MASTER.PRODUCT_ID AS PRODUCT_ID,
  MASTER.SKU_NBR AS SKU_NBR,
  DETAIL.RETAIL_PRICE AS RETAIL_PRICE,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_SKU_PROFILE_5 MASTER
  RIGHT JOIN SQ_Shortcut_to_ALLIVET_DAILY_INVOICE_PRE_3 DETAIL ON MASTER.SKU_NBR = DETAIL.PETSMART_SKU""")

df_6.createOrReplaceTempView("Jnr_SKU_Profile_6")

# COMMAND ----------
# DBTITLE 1, Jnr_Insert_Update_7


df_7 = spark.sql("""SELECT
  DETAIL.INVOICE_POSTING_DATE AS INVOICE_POSTING_DATE,
  DETAIL.INVOICE_CODE AS INVOICE_CODE,
  DETAIL.TRANSACTION_TYPE AS TRANSACTION_TYPE,
  DETAIL.ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  DETAIL.ALLIVET_SKU AS ALLIVET_SKU,
  DETAIL.PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  DETAIL.PETSMART_SKU AS PETSMART_SKU,
  DETAIL.UPC AS UPC,
  DETAIL.UNITS_SOLD AS UNITS_SOLD,
  DETAIL.PRODUCT_COST AS PRODUCT_COST,
  DETAIL.MANUFACTURER AS MANUFACTURER,
  DETAIL.BRAND AS BRAND,
  DETAIL.TITLE AS TITLE,
  DETAIL.FREIGHT_FEE AS FREIGHT_FEE,
  DETAIL.PACKAGING_FEE AS PACKAGING_FEE,
  DETAIL.DISPENSING_FEE AS DISPENSING_FEE,
  DETAIL.SHIPPED_DATE AS SHIPPED_DATE,
  DETAIL.FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  DETAIL.SHIPPING_CARRIER AS SHIPPING_CARRIER,
  DETAIL.TRACKING_NUMBER AS TRACKING_NUMBER,
  DETAIL.ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  DETAIL.PET_NAME AS PET_NAME,
  DETAIL.PET_TYPE AS PET_TYPE,
  DETAIL.BREED_TYPE AS BREED_TYPE,
  DETAIL.PET_GENDER AS PET_GENDER,
  DETAIL.PET_DOB AS PET_DOB,
  DETAIL.PET_WEIGHT AS PET_WEIGHT,
  DETAIL.PET_ALLERGY AS PET_ALLERGY,
  DETAIL.PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  DETAIL.PET_IS_PREGNANT AS PET_IS_PREGNANT,
  DETAIL.VET_CLINIC_NAME AS VET_CLINIC_NAME,
  DETAIL.VETERINARY_NAME AS VETERINARY_NAME,
  DETAIL.VET_ADDRESS AS VET_ADDRESS,
  DETAIL.VET_CITY AS VET_CITY,
  DETAIL.VET_STATE AS VET_STATE,
  DETAIL.VET_ZIP AS VET_ZIP,
  DETAIL.VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  DETAIL.PRODUCT_ID AS PRODUCT_ID,
  DETAIL.SKU_NBR AS SKU_NBR,
  MASTER.INVOICE_POSTING_DT AS LKP_INVOICE_POSTING_DT,
  MASTER.INVOICE_CD AS LKP_INVOICE_CD,
  MASTER.TXN_TYPE AS LKP_TXN_TYPE,
  MASTER.ALLIVET_ORDER_NBR AS LKP_ALLIVET_ORDER_NBR,
  MASTER.ALLIVET_SKU_NBR AS LKP_ALLIVET_SKU_NBR,
  DETAIL.RETAIL_PRICE AS RETAIL_PRICE,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_ALLIVET_INVOICE_DAY_1 MASTER
  RIGHT JOIN Jnr_SKU_Profile_6 DETAIL ON MASTER.INVOICE_POSTING_DT = DETAIL.INVOICE_POSTING_DATE
  AND MASTER.INVOICE_CD = DETAIL.INVOICE_CODE
  AND MASTER.TXN_TYPE = DETAIL.TRANSACTION_TYPE
  AND MASTER.ALLIVET_ORDER_NBR = DETAIL.ALLIVET_ORDER_CODE
  AND MASTER.ALLIVET_SKU_NBR = DETAIL.ALLIVET_SKU""")

df_7.createOrReplaceTempView("Jnr_Insert_Update_7")

# COMMAND ----------
# DBTITLE 1, Exp_Update_Flag_8


df_8 = spark.sql("""SELECT
  INVOICE_POSTING_DATE AS INVOICE_POSTING_DATE,
  INVOICE_CODE AS INVOICE_CODE,
  TRANSACTION_TYPE AS TRANSACTION_TYPE,
  ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  ALLIVET_SKU AS ALLIVET_SKU,
  PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  PETSMART_SKU AS PETSMART_SKU,
  UPC AS UPC,
  UNITS_SOLD AS UNITS_SOLD,
  PRODUCT_COST AS PRODUCT_COST,
  MANUFACTURER AS MANUFACTURER,
  BRAND AS BRAND,
  TITLE AS TITLE,
  FREIGHT_FEE AS FREIGHT_FEE,
  PACKAGING_FEE AS PACKAGING_FEE,
  DISPENSING_FEE AS DISPENSING_FEE,
  SHIPPED_DATE AS SHIPPED_DATE,
  FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  SHIPPING_CARRIER AS SHIPPING_CARRIER,
  TRACKING_NUMBER AS TRACKING_NUMBER,
  ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_DOB AS PET_DOB,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY AS PET_ALLERGY,
  PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  PET_IS_PREGNANT AS PET_IS_PREGNANT,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VETERINARY_NAME AS VETERINARY_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE AS VET_STATE,
  VET_ZIP AS VET_ZIP,
  VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  LOAD_TSTMP AS LOAD_TSTMP,
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  0 AS DELETE_FLAG,
  now() AS UPDATE_TSTMP,
  IFF(
    (
      ISNULL(LKP_INVOICE_POSTING_DT)
      OR ISNULL(LKP_INVOICE_CD)
      OR ISNULL(LKP_TXN_TYPE)
      OR ISNULL(LKP_ALLIVET_ORDER_NBR)
      OR ISNULL(LKP_ALLIVET_SKU_NBR)
    ),
    1,
    2
  ) AS UPDATE_FLAG,
  RETAIL_PRICE AS RETAIL_PRICE,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Jnr_Insert_Update_7""")

df_8.createOrReplaceTempView("Exp_Update_Flag_8")

# COMMAND ----------
# DBTITLE 1, Ftr_Ins_Upd_9


df_9 = spark.sql("""SELECT
  INVOICE_POSTING_DATE AS INVOICE_POSTING_DATE,
  INVOICE_CODE AS INVOICE_CODE,
  TRANSACTION_TYPE AS TRANSACTION_TYPE,
  ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  ALLIVET_SKU AS ALLIVET_SKU,
  PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  PETSMART_SKU AS PETSMART_SKU,
  UPC AS UPC,
  UNITS_SOLD AS UNITS_SOLD,
  PRODUCT_COST AS PRODUCT_COST,
  MANUFACTURER AS MANUFACTURER,
  BRAND AS BRAND,
  TITLE AS TITLE,
  FREIGHT_FEE AS FREIGHT_FEE,
  PACKAGING_FEE AS PACKAGING_FEE,
  DISPENSING_FEE AS DISPENSING_FEE,
  SHIPPED_DATE AS SHIPPED_DATE,
  FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  SHIPPING_CARRIER AS SHIPPING_CARRIER,
  TRACKING_NUMBER AS TRACKING_NUMBER,
  ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_DOB AS PET_DOB,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY AS PET_ALLERGY,
  PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  PET_IS_PREGNANT AS PET_IS_PREGNANT,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VETERINARY_NAME AS VETERINARY_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE AS VET_STATE,
  VET_ZIP AS VET_ZIP,
  VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  LOAD_TSTMP AS LOAD_TSTMP,
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  DELETE_FLAG AS DELETE_FLAG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  UPDATE_FLAG AS UPDATE_FLAG,
  RETAIL_PRICE AS RETAIL_PRICE,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Exp_Update_Flag_8
WHERE
  IN(UPDATE_FLAG, 1, 2)""")

df_9.createOrReplaceTempView("Ftr_Ins_Upd_9")

# COMMAND ----------
# DBTITLE 1, UPDTRANS_10


df_10 = spark.sql("""SELECT
  INVOICE_POSTING_DATE AS INVOICE_POSTING_DATE,
  INVOICE_CODE AS INVOICE_CODE,
  TRANSACTION_TYPE AS TRANSACTION_TYPE,
  ALLIVET_ORDER_CODE AS ALLIVET_ORDER_CODE,
  ALLIVET_SKU AS ALLIVET_SKU,
  PETSMART_ORDER_CODE AS PETSMART_ORDER_CODE,
  PETSMART_SKU AS PETSMART_SKU,
  UPC AS UPC,
  UNITS_SOLD AS UNITS_SOLD,
  PRODUCT_COST AS PRODUCT_COST,
  RETAIL_PRICE AS RETAIL_PRICE,
  MANUFACTURER AS MANUFACTURER,
  BRAND AS BRAND,
  TITLE AS TITLE,
  FREIGHT_FEE AS FREIGHT_FEE,
  PACKAGING_FEE AS PACKAGING_FEE,
  DISPENSING_FEE AS DISPENSING_FEE,
  SHIPPED_DATE AS SHIPPED_DATE,
  FULFILLMENT_ORIGIN_ZIP_CODE AS FULFILLMENT_ORIGIN_ZIP_CODE,
  SHIPPING_CARRIER AS SHIPPING_CARRIER,
  TRACKING_NUMBER AS TRACKING_NUMBER,
  ALLIVET_CUSTOMER_ID AS ALLIVET_CUSTOMER_ID,
  PET_NAME AS PET_NAME,
  PET_TYPE AS PET_TYPE,
  BREED_TYPE AS BREED_TYPE,
  PET_GENDER AS PET_GENDER,
  PET_DOB AS PET_DOB,
  PET_WEIGHT AS PET_WEIGHT,
  PET_ALLERGY AS PET_ALLERGY,
  PET_MEDICAL_CONDITIONS AS PET_MEDICAL_CONDITIONS,
  PET_IS_PREGNANT AS PET_IS_PREGNANT,
  VET_CLINIC_NAME AS VET_CLINIC_NAME,
  VETERINARY_NAME AS VETERINARY_NAME,
  VET_ADDRESS AS VET_ADDRESS,
  VET_CITY AS VET_CITY,
  VET_STATE AS VET_STATE,
  VET_ZIP AS VET_ZIP,
  VET_PHONE_NUMBER AS VET_PHONE_NUMBER,
  LOAD_TSTMP AS LOAD_TSTMP,
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  DELETE_FLAG AS DELETE_FLAG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  UPDATE_FLAG AS UPDATE_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(UPDATE_FLAG, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  Ftr_Ins_Upd_9""")

df_10.createOrReplaceTempView("UPDTRANS_10")

# COMMAND ----------
# DBTITLE 1, ALLIVET_INVOICE_DAY


spark.sql("""MERGE INTO ALLIVET_INVOICE_DAY AS TARGET
USING
  UPDTRANS_10 AS SOURCE ON TARGET.ALLIVET_SKU_NBR = SOURCE.ALLIVET_SKU
  AND TARGET.INVOICE_POSTING_DT = SOURCE.INVOICE_POSTING_DATE
  AND TARGET.INVOICE_CD = SOURCE.INVOICE_CODE
  AND TARGET.TXN_TYPE = SOURCE.TRANSACTION_TYPE
  AND TARGET.ALLIVET_ORDER_NBR = SOURCE.ALLIVET_ORDER_CODE
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.INVOICE_POSTING_DT = SOURCE.INVOICE_POSTING_DATE,
  TARGET.INVOICE_CD = SOURCE.INVOICE_CODE,
  TARGET.TXN_TYPE = SOURCE.TRANSACTION_TYPE,
  TARGET.ALLIVET_ORDER_NBR = SOURCE.ALLIVET_ORDER_CODE,
  TARGET.ALLIVET_SKU_NBR = SOURCE.ALLIVET_SKU,
  TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID,
  TARGET.PETSMART_ORDER_NBR = SOURCE.PETSMART_ORDER_CODE,
  TARGET.PETSMART_SKU_NBR = SOURCE.PETSMART_SKU,
  TARGET.UPC_ID = SOURCE.UPC,
  TARGET.SOLD_UNITS_QTY = SOURCE.UNITS_SOLD,
  TARGET.PRODUCT_COST = SOURCE.PRODUCT_COST,
  TARGET.RETAIL_PRICE = SOURCE.RETAIL_PRICE,
  TARGET.MANUFACTURER = SOURCE.MANUFACTURER,
  TARGET.BRAND_NAME = SOURCE.BRAND,
  TARGET.TITLE = SOURCE.TITLE,
  TARGET.FREIGHT_FEE_AMT = SOURCE.FREIGHT_FEE,
  TARGET.PACKAGING_FEE_AMT = SOURCE.PACKAGING_FEE,
  TARGET.DISPENSING_FEE_AMT = SOURCE.DISPENSING_FEE,
  TARGET.SHIPPED_DT = SOURCE.SHIPPED_DATE,
  TARGET.FULFILLMENT_ORIGIN_ZIP_CD = SOURCE.FULFILLMENT_ORIGIN_ZIP_CODE,
  TARGET.SHIP_CARRIER_NAME = SOURCE.SHIPPING_CARRIER,
  TARGET.TRACKING_NBR = SOURCE.TRACKING_NUMBER,
  TARGET.ALLIVET_CUSTOMER_NBR = SOURCE.ALLIVET_CUSTOMER_ID,
  TARGET.PET_NAME = SOURCE.PET_NAME,
  TARGET.PET_TYPE = SOURCE.PET_TYPE,
  TARGET.BREED_TYPE = SOURCE.BREED_TYPE,
  TARGET.PET_GENDER = SOURCE.PET_GENDER,
  TARGET.PET_BIRT_DT = SOURCE.PET_DOB,
  TARGET.PET_WEIGHT = SOURCE.PET_WEIGHT,
  TARGET.PET_ALLERGY_DESC = SOURCE.PET_ALLERGY,
  TARGET.PET_MEDICAL_CONDITION = SOURCE.PET_MEDICAL_CONDITIONS,
  TARGET.PET_PREGNANT_FLAG = SOURCE.PET_IS_PREGNANT,
  TARGET.VET_CLINIC_NAME = SOURCE.VET_CLINIC_NAME,
  TARGET.VET_NAME = SOURCE.VETERINARY_NAME,
  TARGET.VET_ADDRESS = SOURCE.VET_ADDRESS,
  TARGET.VET_CITY = SOURCE.VET_CITY,
  TARGET.VET_STATE_CD = SOURCE.VET_STATE,
  TARGET.VET_ZIP_CD = SOURCE.VET_ZIP,
  TARGET.VET_PHONE_NBR = SOURCE.VET_PHONE_NUMBER,
  TARGET.DELETE_FLAG = SOURCE.DELETE_FLAG,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID
  AND TARGET.PETSMART_ORDER_NBR = SOURCE.PETSMART_ORDER_CODE
  AND TARGET.PETSMART_SKU_NBR = SOURCE.PETSMART_SKU
  AND TARGET.UPC_ID = SOURCE.UPC
  AND TARGET.SOLD_UNITS_QTY = SOURCE.UNITS_SOLD
  AND TARGET.PRODUCT_COST = SOURCE.PRODUCT_COST
  AND TARGET.RETAIL_PRICE = SOURCE.RETAIL_PRICE
  AND TARGET.MANUFACTURER = SOURCE.MANUFACTURER
  AND TARGET.BRAND_NAME = SOURCE.BRAND
  AND TARGET.TITLE = SOURCE.TITLE
  AND TARGET.FREIGHT_FEE_AMT = SOURCE.FREIGHT_FEE
  AND TARGET.PACKAGING_FEE_AMT = SOURCE.PACKAGING_FEE
  AND TARGET.DISPENSING_FEE_AMT = SOURCE.DISPENSING_FEE
  AND TARGET.SHIPPED_DT = SOURCE.SHIPPED_DATE
  AND TARGET.FULFILLMENT_ORIGIN_ZIP_CD = SOURCE.FULFILLMENT_ORIGIN_ZIP_CODE
  AND TARGET.SHIP_CARRIER_NAME = SOURCE.SHIPPING_CARRIER
  AND TARGET.TRACKING_NBR = SOURCE.TRACKING_NUMBER
  AND TARGET.ALLIVET_CUSTOMER_NBR = SOURCE.ALLIVET_CUSTOMER_ID
  AND TARGET.PET_NAME = SOURCE.PET_NAME
  AND TARGET.PET_TYPE = SOURCE.PET_TYPE
  AND TARGET.BREED_TYPE = SOURCE.BREED_TYPE
  AND TARGET.PET_GENDER = SOURCE.PET_GENDER
  AND TARGET.PET_BIRT_DT = SOURCE.PET_DOB
  AND TARGET.PET_WEIGHT = SOURCE.PET_WEIGHT
  AND TARGET.PET_ALLERGY_DESC = SOURCE.PET_ALLERGY
  AND TARGET.PET_MEDICAL_CONDITION = SOURCE.PET_MEDICAL_CONDITIONS
  AND TARGET.PET_PREGNANT_FLAG = SOURCE.PET_IS_PREGNANT
  AND TARGET.VET_CLINIC_NAME = SOURCE.VET_CLINIC_NAME
  AND TARGET.VET_NAME = SOURCE.VETERINARY_NAME
  AND TARGET.VET_ADDRESS = SOURCE.VET_ADDRESS
  AND TARGET.VET_CITY = SOURCE.VET_CITY
  AND TARGET.VET_STATE_CD = SOURCE.VET_STATE
  AND TARGET.VET_ZIP_CD = SOURCE.VET_ZIP
  AND TARGET.VET_PHONE_NBR = SOURCE.VET_PHONE_NUMBER
  AND TARGET.DELETE_FLAG = SOURCE.DELETE_FLAG
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.INVOICE_POSTING_DT,
    TARGET.INVOICE_CD,
    TARGET.TXN_TYPE,
    TARGET.ALLIVET_ORDER_NBR,
    TARGET.ALLIVET_SKU_NBR,
    TARGET.PRODUCT_ID,
    TARGET.PETSMART_ORDER_NBR,
    TARGET.PETSMART_SKU_NBR,
    TARGET.UPC_ID,
    TARGET.SOLD_UNITS_QTY,
    TARGET.PRODUCT_COST,
    TARGET.RETAIL_PRICE,
    TARGET.MANUFACTURER,
    TARGET.BRAND_NAME,
    TARGET.TITLE,
    TARGET.FREIGHT_FEE_AMT,
    TARGET.PACKAGING_FEE_AMT,
    TARGET.DISPENSING_FEE_AMT,
    TARGET.SHIPPED_DT,
    TARGET.FULFILLMENT_ORIGIN_ZIP_CD,
    TARGET.SHIP_CARRIER_NAME,
    TARGET.TRACKING_NBR,
    TARGET.ALLIVET_CUSTOMER_NBR,
    TARGET.PET_NAME,
    TARGET.PET_TYPE,
    TARGET.BREED_TYPE,
    TARGET.PET_GENDER,
    TARGET.PET_BIRT_DT,
    TARGET.PET_WEIGHT,
    TARGET.PET_ALLERGY_DESC,
    TARGET.PET_MEDICAL_CONDITION,
    TARGET.PET_PREGNANT_FLAG,
    TARGET.VET_CLINIC_NAME,
    TARGET.VET_NAME,
    TARGET.VET_ADDRESS,
    TARGET.VET_CITY,
    TARGET.VET_STATE_CD,
    TARGET.VET_ZIP_CD,
    TARGET.VET_PHONE_NBR,
    TARGET.DELETE_FLAG,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.INVOICE_POSTING_DATE,
    SOURCE.INVOICE_CODE,
    SOURCE.TRANSACTION_TYPE,
    SOURCE.ALLIVET_ORDER_CODE,
    SOURCE.ALLIVET_SKU,
    SOURCE.PRODUCT_ID,
    SOURCE.PETSMART_ORDER_CODE,
    SOURCE.PETSMART_SKU,
    SOURCE.UPC,
    SOURCE.UNITS_SOLD,
    SOURCE.PRODUCT_COST,
    SOURCE.RETAIL_PRICE,
    SOURCE.MANUFACTURER,
    SOURCE.BRAND,
    SOURCE.TITLE,
    SOURCE.FREIGHT_FEE,
    SOURCE.PACKAGING_FEE,
    SOURCE.DISPENSING_FEE,
    SOURCE.SHIPPED_DATE,
    SOURCE.FULFILLMENT_ORIGIN_ZIP_CODE,
    SOURCE.SHIPPING_CARRIER,
    SOURCE.TRACKING_NUMBER,
    SOURCE.ALLIVET_CUSTOMER_ID,
    SOURCE.PET_NAME,
    SOURCE.PET_TYPE,
    SOURCE.BREED_TYPE,
    SOURCE.PET_GENDER,
    SOURCE.PET_DOB,
    SOURCE.PET_WEIGHT,
    SOURCE.PET_ALLERGY,
    SOURCE.PET_MEDICAL_CONDITIONS,
    SOURCE.PET_IS_PREGNANT,
    SOURCE.VET_CLINIC_NAME,
    SOURCE.VETERINARY_NAME,
    SOURCE.VET_ADDRESS,
    SOURCE.VET_CITY,
    SOURCE.VET_STATE,
    SOURCE.VET_ZIP,
    SOURCE.VET_PHONE_NUMBER,
    SOURCE.DELETE_FLAG,
    SOURCE.UPDATE_TSTMP,
    SOURCE.LOAD_TSTMP
  )""")